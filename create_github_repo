import os
import requests
import json
import subprocess

def get_github_token():
    """Get GitHub access token from Replit connection."""
    hostname = os.environ.get('REPLIT_CONNECTORS_HOSTNAME')
    x_replit_token = None
    
    if os.environ.get('REPL_IDENTITY'):
        x_replit_token = 'repl ' + os.environ['REPL_IDENTITY']
    elif os.environ.get('WEB_REPL_RENEWAL'):
        x_replit_token = 'depl ' + os.environ['WEB_REPL_RENEWAL']
    
    if not x_replit_token:
        raise Exception('X_REPLIT_TOKEN not found')
    
    response = requests.get(
        f'https://{hostname}/api/v2/connection?include_secrets=true&connector_names=github',
        headers={
            'Accept': 'application/json',
            'X_REPLIT_TOKEN': x_replit_token
        }
    )
    
    data = response.json()
    connection = data.get('items', [{}])[0]
    access_token = connection.get('settings', {}).get('access_token')
    
    if not access_token:
        raise Exception('GitHub access token not found')
    
    return access_token

def get_github_username(token):
    """Get the authenticated user's GitHub username."""
    response = requests.get(
        'https://api.github.com/user',
        headers={
            'Authorization': f'Bearer {token}',
            'Accept': 'application/vnd.github+json'
        }
    )
    response.raise_for_status()
    return response.json()['login']

def create_repository(token, repo_name, description, is_private=False):
    """Create a new GitHub repository."""
    response = requests.post(
        'https://api.github.com/user/repos',
        headers={
            'Authorization': f'Bearer {token}',
            'Accept': 'application/vnd.github+json'
        },
        json={
            'name': repo_name,
            'description': description,
            'private': is_private,
            'auto_init': False
        }
    )
    
    if response.status_code == 201:
        return response.json()
    elif response.status_code == 422:
        print(f"Repository '{repo_name}' already exists. Using existing repository.")
        username = get_github_username(token)
        return {'html_url': f'https://github.com/{username}/{repo_name}', 'ssh_url': f'git@github.com:{username}/{repo_name}.git'}
    else:
        response.raise_for_status()

def setup_git_and_push(repo_url, token):
    """Initialize git, add files, commit, and push."""
    # Check if git is already initialized
    if not os.path.exists('.git'):
        subprocess.run(['git', 'init'], check=True)
        print("‚úì Git initialized")
    
    # Add all files
    subprocess.run(['git', 'add', '.'], check=True)
    print("‚úì Files staged")
    
    # Check if there are changes to commit
    result = subprocess.run(['git', 'status', '--porcelain'], capture_output=True, text=True)
    if result.stdout.strip():
        subprocess.run(['git', 'commit', '-m', 'Initial commit: MacroCycle AI Agent - Autonomous macro-economic intelligence assistant'], check=True)
        print("‚úì Initial commit created")
    else:
        print("‚úì No new changes to commit")
    
    # Add remote if it doesn't exist
    result = subprocess.run(['git', 'remote', 'get-url', 'origin'], capture_output=True)
    if result.returncode != 0:
        # Convert HTTPS URL to use token authentication
        username = get_github_username(token)
        auth_url = repo_url.replace('https://github.com/', f'https://{username}:{token}@github.com/')
        subprocess.run(['git', 'remote', 'add', 'origin', auth_url], check=True)
        print("‚úì Remote 'origin' added")
    else:
        print("‚úì Remote 'origin' already exists")
    
    # Push to GitHub
    try:
        subprocess.run(['git', 'push', '-u', 'origin', 'main'], check=True)
        print("‚úì Code pushed to GitHub (main branch)")
    except subprocess.CalledProcessError:
        # Try master branch if main doesn't work
        try:
            subprocess.run(['git', 'branch', '-M', 'main'], check=True)
            subprocess.run(['git', 'push', '-u', 'origin', 'main'], check=True)
            print("‚úì Code pushed to GitHub (main branch)")
        except subprocess.CalledProcessError as e:
            print(f"‚ö† Push failed: {e}")
            print("You may need to push manually using: git push -u origin main")

if __name__ == '__main__':
    try:
        print("Creating GitHub repository for MacroCycle AI Agent...")
        print()
        
        # Get token
        token = get_github_token()
        print("‚úì GitHub token retrieved")
        
        # Repository details
        repo_name = 'macrocycle-ai-agent'
        description = 'MacroCycle AI Agent - Autonomous macro-economic intelligence assistant built for the Imperial AI Policy Fellowship. Demonstrates AI-driven economic analysis with real-time data from FRED, CBOE, and Yahoo Finance.'
        
        # Create repository
        repo_data = create_repository(token, repo_name, description, is_private=False)
        print(f"‚úì Repository created/found: {repo_data['html_url']}")
        print()
        
        # Setup git and push
        setup_git_and_push(repo_data['html_url'], token)
        print()
        print("=" * 70)
        print(f"üéâ SUCCESS! Your repository is live at:")
        print(f"   {repo_data['html_url']}")
        print("=" * 70)
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
